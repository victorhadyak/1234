pipeline {
    agent any

    environment {
        INSTANCE_ID = "i-0123456789abcdef0"  // Replace with your EC2 instance ID
        REGION = "us-west-2"  // Replace with your AWS region
        S3_BUCKET = "your-s3-bucket-name"  // Replace with your S3 bucket name
        S3_KEY = "path/to/your/file.zip"  // Replace with your S3 object key
        TMP_DIR = "/tmp/unzipped-files"  // Target directory for unzipping
    }

    stages {
        stage('Trigger SSM Command with S3 Copy and Unzip') {
            steps {
                script {
                    // Trigger the SSM command and capture CommandId
                    def commandId = sh(
                        script: """
                        aws ssm send-command \
                            --instance-ids "${INSTANCE_ID}" \
                            --document-name "AWS-RunShellScript" \
                            --parameters '{"commands":[
                                "aws s3 cp s3://${S3_BUCKET}/${S3_KEY} /tmp/file.zip",
                                "mkdir -p ${TMP_DIR}",
                                "unzip /tmp/file.zip -d ${TMP_DIR}",
                                "echo File copied and unzipped to ${TMP_DIR}"
                            ]}' \
                            --query "Command.CommandId" \
                            --output text \
                            --region "${REGION}"
                        """,
                        returnStdout: true
                    ).trim()

                    echo "SSM Command triggered. CommandId: ${commandId}"

                    // Save the CommandId for later stages
                    env.COMMAND_ID = commandId
                }
            }
        }

        stage('Wait for Command Completion') {
            steps {
                script {
                    // Wait for a few seconds to allow the command to execute
                    sleep(10)  // Adjust based on your command's expected execution time
                }
            }
        }

        stage('Retrieve and Display Command Output') {
            steps {
                script {
                    // Retrieve the command output
                    def commandOutput = sh(
                        script: """
                        aws ssm get-command-invocation \
                            --instance-id "${INSTANCE_ID}" \
                            --command-id "${COMMAND_ID}" \
                            --query "StandardOutputContent" \
                            --output text \
                            --region "${REGION}"
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Command Output: ${commandOutput}"

                    // Retrieve and display any error output
                    def commandErrorOutput = sh(
                        script: """
                        aws ssm get-command-invocation \
                            --instance-id "${INSTANCE_ID}" \
                            --command-id "${COMMAND_ID}" \
                            --query "StandardErrorContent" \
                            --output text \
                            --region "${REGION}"
                        """,
                        returnStdout: true
                    ).trim()

                    if (commandErrorOutput) {
                        echo "Error Output: ${commandErrorOutput}"
                        error("SSM command execution encountered an error.")
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
    }
}
